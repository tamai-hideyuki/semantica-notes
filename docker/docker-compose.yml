services:
  # ─── Elasticsearch ───────────────────────────────────
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
    environment:
      discovery.type: single-node
      bootstrap.memory_lock: 'true'
      xpack.security.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - app_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ─── Frontend (Next.js 開発サーバー) ────────────────
  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: "${NEXT_PUBLIC_API_BASE_URL}"
    working_dir: /app/apps/frontend
    volumes:
      - ../apps/frontend:/app/apps/frontend:delegated
    environment:
      NEXT_PUBLIC_API_BASE_URL: "${NEXT_PUBLIC_API_BASE_URL}"
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - app_net
    restart: unless-stopped

  # ─── Backend (FastAPI / uvicorn) ────────────────────
  backend:
    build:
      context: ..
      dockerfile: docker/backend.Dockerfile
    working_dir: /app/apps/backend
    volumes:
      - ../apps/backend:/app/apps/backend:delegated
      # Faiss インデックスを永続化するボリューム (apps/backend/.index_data をマウント)
      - ../apps/backend/.index_data:/app/apps/backend/.index_data:rw
    environment:
      VEC_EMBEDDING_DIM: "${VEC_EMBEDDING_DIM}"
      VEC_ELASTICSEARCH_HOSTS: "${VEC_ELASTICSEARCH_HOSTS}"
      VEC_ELASTICSEARCH_INDEX: "${VEC_ELASTICSEARCH_INDEX}"
      VEC_HYBRID_SEMANTIC_WEIGHT: "${VEC_HYBRID_SEMANTIC_WEIGHT}"
      VEC_HYBRID_ELASTIC_WEIGHT: "${VEC_HYBRID_ELASTIC_WEIGHT}"
      FAISS_INDEX_DIR: "/app/apps/backend/.index_data"
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app_net
    restart: unless-stopped

  # ─── Nginx (リバースプロキシ) ────────────────────────
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - frontend
      - backend
      - elasticsearch
    networks:
      - app_net
    restart: unless-stopped

networks:
  app_net:
    driver: bridge
